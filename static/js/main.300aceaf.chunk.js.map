{"version":3,"sources":["video.mp4","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","spotifyApi","SpotifyWebApi","App","_this","Object","classCallCheck","this","token","possibleConstructorReturn","getPrototypeOf","call","getHashParams","access_token","setAccessToken","handleLoadSuccess","bind","assertThisInitialized","handleLoadFailure","cb","state","loggedIn","nowPlaying","names","albumArt","artist","albumTitle","isPlaying","trackURI","currentDeviceID","userInfo","userName","userID","favPlaylistInfo","playlistID","e","hashParams","r","q","window","location","hash","substring","exec","decodeURIComponent","_this2","getMyCurrentPlaybackState","then","response","item","setState","name","album","images","url","artists","is_playing","uri","device","id","_this3","getMe","display_name","split","play","device_id","context_uri","_this4","setInterval","getNowPlaying","onSpotifyWebPlaybackSDKReady","scriptLoaded","console","log","player","Spotify","Player","getOAuthToken","getAccessToken","addListener","_ref","message","error","_ref2","_ref3","_ref4","_ref5","_ref6","connect","success","scriptError","playButton","skipToPrev","skipToNext","logIn","londonButton","newYorkButton","LAButton","chicagoButton","getUserInfo","react_default","a","createElement","onClick","skipToPrevious","getLondonPlaylist","getNewYorkPlaylist","getLAPlaylist","getChicagoPlaylist","href","title","pause","className","Helmet_default","lib_default","onCreate","handleScriptCreate","onError","handleScriptError","onLoad","handleScriptLoad","autoPlay","muted","loop","type","src","video","style","height","class","React","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.300aceaf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/video.6f0f76e5.mp4\";","import React from 'react';\nimport './App.css';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport Helmet from 'react-helmet';\nimport Script from 'react-load-script';\nimport 'react-background-video-player';\nimport video from './video.mp4'\nconst spotifyApi = new SpotifyWebApi();\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    const params = this.getHashParams();\n    const token = params.access_token;\n    if (token) {\n      spotifyApi.setAccessToken(token);\n    }\n    this.handleLoadSuccess = this.handleLoadSuccess.bind(this); \n    this.handleLoadFailure = this.handleLoadSuccess.bind(this); \n    this.cb = this.cb.bind(this);\n    this.state = {\n      loggedIn: token ? true : false,\n      nowPlaying: {\n        names: 'Nothing Playing', \n        albumArt: '', artist: '', \n        albumTitle: '', \n        isPlaying: false,\n        trackURI: '',\n        currentDeviceID: ''\n      },\n      userInfo: {\n        userName: '',\n        userID: ''\n      },\n      favPlaylistInfo: {\n        playlistID: ''\n      }\n    }\n  }\n  getHashParams() {\n    var hashParams = {};\n    var e,r = /([^&;=]+)=?([^&;]*)/g,\n      q = window.location.hash.substring(1);\n    e = r.exec(q);\n    while (e) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n      e = r.exec(q);\n    }\n    return hashParams;\n  }\n  getNowPlaying() {\n    spotifyApi.getMyCurrentPlaybackState()\n      .then((response) => {\n        if(response.item) {\n        this.setState({\n          nowPlaying: {\n            name: response.item.name,\n            albumArt: response.item.album.images[0].url,\n            artist: response.item.artists[0].name,\n            albumTitle: response.item.album.name,\n            isPlaying: response.is_playing,\n            trackURI: response.item.uri,\n            currentDeviceID: response.device.id\n          },\n        })\n      } else {\n        this.setState({\n          nowPlaying: {\n            name: '',\n            albumArt: '',\n            artist: '',\n            albumTitle: '',\n            isPlaying: false,\n            trackURI: ''\n          },\n        })\n      };\n      })\n  }\n  getUserInfo() {\n    spotifyApi.getMe() \n      .then((response) => {\n        this.setState({\n          userInfo: {\n            name: response.display_name.split(\" \")[0],\n            userID: response.id\n          }\n        })\n      }\n      )\n  }\n  transferPlayback() {\n    spotifyApi.play({\n      'device_id' : \"5e02af2d00fc9ddec962b6c0e9518f90c76399a3\"\n    })\n  }\n  getLondonPlaylist() {\n      spotifyApi.play({\n        'device_id' : \"5e02af2d00fc9ddec962b6c0e9518f90c76399a3\" ,\n        'context_uri': 'spotify:playlist:1ar0yt2oQpD8pXjIw7iWPr'\n      });\n  }\n  getNewYorkPlaylist() {\n    spotifyApi.play({\n      'device_id' : \"5e02af2d00fc9ddec962b6c0e9518f90c76399a3\" ,\n      'context_uri': 'spotify:playlist:6wAvsF7l0rcJvgDAGGEMNk'\n    });\n  }\n  getLAPlaylist() {\n    spotifyApi.play({\n      'device_id' : \"5e02af2d00fc9ddec962b6c0e9518f90c76399a3\" ,\n      'context_uri': 'spotify:playlist:6qbWjEwNAiZag64dgm84pG'\n    });\n  }\n  getChicagoPlaylist() {\n    spotifyApi.play({\n      'device_id' : \"5e02af2d00fc9ddec962b6c0e9518f90c76399a3\" ,\n      'context_uri': 'spotify:playlist:0Gq3zcC1xzphOF3RjwJMi4'\n    });\n  }\n  /*addFav() {\n    var userID = this.userInfo.userID\n    spotifyApi.getUserPlaylists(userID)\n      .then((response) => {\n        for (var i = 0; i < response.items.length; i++) {\n          if (response.items[i].name.localeCompare(\"Chunes: Favorites\")) {\n              this.setState({\n                favPlaylistInfo: { \n                playlistID: response.items[i].id\n                }\n              })\n          }\n        }\n        if (this.state.favPlaylistInfo.playlistID === '') {\n          spotifyApi.createPlaylist(this.state.userInfo.userID)\n          .then((response) => {\n              response.name = 'Chunes: Favorites';\n              response.description = \"Here are your favorite chunes, curated  by the Chunes app!\";\n              this.setState({\n                favPlaylistInfo: {\n                  playlistID : response.id\n                }\n            })\n          })\n        }\n        spotifyApi.addTracksToPlaylist(this.state.favPlaylistInfo.playlistID, [this.state.nowPlaying.trackURI])\n      }) \n  }*/\n  componentDidMount() {\n    setInterval(() => this.getNowPlaying(), 1000);\n    window.onSpotifyWebPlaybackSDKReady = () => {\n      this.handleLoadSuccess();\n    }\n  }\n  handleLoadSuccess() {\n    this.setState({scriptLoaded: true})\n    console.log(\"Script Loaded\");\n    const player = new window.Spotify.Player({\n      name: 'Chunes',\n      getOAuthToken: cb => {\n        cb(spotifyApi.getAccessToken()) \n      }\n    });\n    console.log(player);\n    // Error handling\n    player.addListener('initialization_error', ({ message }) => { console.error(message); });\n    player.addListener('authentication_error', ({ message }) => { console.error(message); });\n    player.addListener('account_error', ({ message }) => { console.error(message); });\n    player.addListener('playback_error', ({ message }) => { console.error(message); });\n\n    // Playback status updates\n    player.addListener('player_state_changed', state => { console.log(state); });\n\n    // Ready\n    player.addListener('ready', ({ device_id }) => {\n      console.log('Ready with Device ID', device_id);\n    });\n\n    // Not Ready\n    player.addListener('not_ready', ({ device_id }) => {\n      console.log('Device ID has gone offline', device_id);\n    });\n\n    // Connect to the player!\n    player.connect().then(success => {\n      if  (success) {\n        console.log('Connected');\n      }\n    })\n  }\n\n  cb(token) {\n    return(token);\n  }\n  handleScriptCreate(){\n    this.setState({scriptLoaded:false});\n    console.log(\"Script created\");\n  }\n\n  handleScriptError() {\n    this.setState({scriptError: true});\n    console.log(\"Script error\");\n  }\n  handleScriptLoad() {\n    this.setState({scriptLoaded:true});\n    console.log(\"Script loaded\");\n  }\n  render() {\n    const loggedIn = this.state.loggedIn;\n    const userName = this.state.userInfo.name;\n    let playButton;\n    let skipToPrev;\n    let skipToNext;\n    let logIn;\n    let londonButton;\n    let newYorkButton;\n    let LAButton;\n    let chicagoButton;\n    \n    //let favButton;\n    if (loggedIn) {\n      this.getUserInfo();\n      //this.transferPlayback();\n      skipToPrev =  <button onClick={spotifyApi.skipToPrevious}>&#171;</button>;\n      skipToNext = <button onClick={spotifyApi.skipToNext}>&#187;</button>;\n      londonButton = \n        <button onClick={this.getLondonPlaylist}>\n        London, England\n        </button>;\n      newYorkButton = \n        <button onClick={this.getNewYorkPlaylist}>\n        New York, New York\n        </button>;\n      LAButton = \n        <button onClick={this.getLAPlaylist}>\n        Los Angeles, California\n        </button>;\n      chicagoButton = \n        <button onClick={this.getChicagoPlaylist}>\n        Chicago, Illinois\n        </button>;\n    }\n    else {\n      logIn = <a href=\"http://localhost:8888\">\n      Log In to Spotify\n    </a>\n    }\n    let title = \"Welcome\";\n    if (loggedIn && this.state.nowPlaying.isPlaying) { \n      logIn = <b>{ userName } is currently listening to: </b>\n      title = \"► \" + this.state.nowPlaying.artist + \" - \" + this.state.nowPlaying.name;\n      playButton = <button onClick={spotifyApi.pause}>❚❚</button>;\n      //favButton = <button onClick={this.addFav}>❤</button>\n    }\n    else if (loggedIn){\n      logIn = <b>Play Something!</b>\n      title = '❚❚ ' + this.state.nowPlaying.artist + \" - \" + this.state.nowPlaying.name;\n      playButton = <button onClick={spotifyApi.play}>►</button>;\n    }\n    return (\n      <div className=\"App\">\n        <Helmet>\n          <title>\n            {title}\n          </title>\n        </Helmet>\n        <div className=\"App-header\">\n          <Script \n            url=\"https://sdk.scdn.co/spotify-player.js\"\n            onCreate={this.handleScriptCreate.bind(this)}\n            onError={this.handleScriptError.bind(this)}\n            onLoad ={this.handleScriptLoad.bind(this)}\n          />\n    </div>\n      <div id=\"background-video\">\n      <video autoPlay muted loop>\n      <source type=\"video/mp4\" src={video}/>\n      </video>\n    </div>\n        <div id=\"log-in\">\n        {logIn}\n\n        </div>\n        <div id=\"now-playing\">\n          <div id=\"album-cover\">\n            <img src={this.state.nowPlaying.albumArt} style={{ height: 350 }}/>\n          </div>\n          <div id=\"name-and-artist\">\n            <div id=\"track-name\">\n              <b>{this.state.nowPlaying.name}</b>\n            </div>\n            <div id=\"track-artist\">\n              <b>{this.state.nowPlaying.artist}</b>\n            </div>\n          </div>\n          </div>\n\n        <div class=\"controls\">\n        { skipToPrev}\n        { playButton }\n        { skipToNext }\n        {/* favButton */}\n        </div>\n        \n        <div id=\"buttons\">\n          {londonButton}\n          {newYorkButton}\n          {LAButton}\n          {chicagoButton}\n        </div>\n      </div>\n    );\n  }\n  }\n  \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}